<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:helpers="clr-namespace:MetroRibbon.helpers">
    <Style x:Key="TabItemBase" TargetType="{x:Type TabItem}" BasedOn="{StaticResource MetroTabItem}">
        <Setter Property="Control.FontSize" Value="14"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,-1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid Margin="4,0,0,0">
                        <Border x:Name="Border" Padding="8,1,8,3" BorderThickness="1,1,1,0" BorderBrush="Transparent">
                            <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True"
                         Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}">
                            <Setter Value="{DynamicResource BlackBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}"
                           Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}"
                           Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}"
                           Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Value="{DynamicResource HighlightBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Value="{DynamicResource GrayBrush10}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource HighlightBrush}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}"
                           Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroRibbonBase" TargetType="{x:Type helpers:MetroRibbon}"
         BasedOn="{StaticResource MetroTabControl}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TabItemBase}"/>
        <Setter Property="TabControl.ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Height="100" Margin="1,0" HorizontalAlignment="Stretch" Background="{DynamicResource GrayBrush10}"
                  BorderThickness="0,1" BorderBrush="{DynamicResource HighlightBrush}">
                        <ContentPresenter Content="{Binding}"/>
                    </Border>
                    <DataTemplate.Triggers>
                        <DataTrigger Value="False"
                         Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Height" From="0" To="100" Duration="0:0:0.05" AccelerationRatio="1"
                                     FillBehavior="Stop"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" FillBehavior="Stop">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.05" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.EnterActions>
                        </DataTrigger>
                        <DataTrigger Value="True"
                         Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type helpers:MetroRibbon}}}">
                            <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RibbonGroupBase" TargetType="{x:Type helpers:RibbonGroup}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type helpers:RibbonGroup}">
                    <Border Padding="7,0" Margin="0,5" BorderBrush="{DynamicResource GrayBrush7}" BorderThickness="0,0,1,0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ContentPresenter/>
                            <TextBlock Grid.Row="1" Margin="0" Text="{TemplateBinding helpers:RibbonGroup.Title}" FontSize="12"
                         FontWeight="SemiBold" Foreground="{DynamicResource HighlightBrush}" HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type helpers:RibbonLabel}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.FontSize" Value="12"/>
        <Setter Property="Control.FontWeight" Value="Normal"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type helpers:RibbonLabel}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <icons:PackIconMaterial x:Name="Icon" Kind="{TemplateBinding helpers:RibbonLabel.IconKind}" FrameworkElement.Width="16"
                              FrameworkElement.Height="16" FrameworkElement.VerticalAlignment="Center"
                              Control.Foreground="{DynamicResource AccentColorBrush}"/>
                        <TextBlock Grid.Column="1" Text="{TemplateBinding ContentControl.Content}" Margin="5,0,10,0"
                       VerticalAlignment="Center" TextWrapping="NoWrap" Foreground="{DynamicResource BlackBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Background" Value="Transparent"/>
                            <Setter Value="{DynamicResource GrayBrush3}" Property="Control.Foreground"/>
                            <Setter TargetName="Icon" Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="LargeRibbonButton" TargetType="{x:Type helpers:RibbonButton}">
        <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}"
            Background="{TemplateBinding Control.Background}"
            BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
            BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
            <Grid ShowGridLines="false">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <icons:PackIconMaterial x:Name="Icon" Kind="{TemplateBinding helpers:RibbonButton.IconKind}" FrameworkElement.Height="24"
                          FrameworkElement.Width="24" FrameworkElement.HorizontalAlignment="Center"
                          Control.Foreground="{DynamicResource AccentColorBrush}"/>
                <TextBlock Grid.Row="1" Text="{TemplateBinding ContentControl.Content}" Margin="0,5,0,0"
                   VerticalAlignment="Top" HorizontalAlignment="Stretch" TextAlignment="Center"
                   TextWrapping="WrapWithOverflow" TextTrimming="CharacterEllipsis"
                   Foreground="{TemplateBinding Control.Foreground}" helpers:TextblockHelper.AutoTooltip="true"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource AccentColorBrush3}" Property="Control.Background"/>
                <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                <Setter TargetName="Icon" Value="{DynamicResource HighlightBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
                <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                <Setter TargetName="Icon" Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Background" Value="Transparent"/>
                <Setter Property="Control.BorderBrush" Value="Transparent"/>
                <Setter Value="{DynamicResource GrayBrush3}" Property="Control.Foreground"/>
                <Setter TargetName="Icon" Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RibbonButtonBase" TargetType="{x:Type helpers:RibbonButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Padding" Value="5"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush1}"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.FontSize" Value="12"/>
        <Setter Property="Control.FontWeight" Value="Normal"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type helpers:RibbonButton}">
                    <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                  BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <icons:PackIconMaterial x:Name="Icon" Kind="{TemplateBinding helpers:RibbonButton.IconKind}" FrameworkElement.Width="16"
                                FrameworkElement.Height="16" FrameworkElement.VerticalAlignment="Center"
                                Control.Foreground="{DynamicResource AccentColorBrush}"/>
                            <TextBlock Grid.Column="1" Text="{TemplateBinding ContentControl.Content}" Margin="5,0,0,0"
                         VerticalAlignment="Center" TextWrapping="NoWrap" Foreground="{TemplateBinding Control.Foreground}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource AccentColorBrush3}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                            <Setter TargetName="Icon" Value="{DynamicResource HighlightBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Icon" Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Background" Value="Transparent"/>
                            <Setter Property="Control.BorderBrush" Value="Transparent"/>
                            <Setter Value="{DynamicResource GrayBrush3}" Property="Control.Foreground"/>
                            <Setter TargetName="Icon" Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="helpers:RibbonButton.IsEnlarged" Value="true">
                <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
                <Setter Property="FrameworkElement.MinWidth" Value="50"/>
                <Setter Property="FrameworkElement.MaxWidth" Value="80"/>
                <Setter Property="Grid.RowSpan" Value="2"/>
                <Setter Property="Control.Template" Value="{StaticResource LargeRibbonButton}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="LargeRibbonDropButton" TargetType="{x:Type helpers:RibbonDropButton}">
        <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}"
            Background="{TemplateBinding Control.Background}"
            BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
            BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
            <Grid ShowGridLines="false">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <icons:PackIconMaterial x:Name="Icon" Kind="{TemplateBinding helpers:RibbonDropButton.IconKind}" FrameworkElement.Height="24"
                          FrameworkElement.Width="24" FrameworkElement.HorizontalAlignment="Center"
                          Control.Foreground="{DynamicResource AccentColorBrush}"/>
                <TextBlock Grid.Row="1" Text="{TemplateBinding ContentControl.Content}" Margin="0,5" VerticalAlignment="Top"
                   HorizontalAlignment="Stretch" TextAlignment="Center" TextWrapping="NoWrap"
                   Foreground="{TemplateBinding Control.Foreground}"/>
                <icons:PackIconMaterial x:Name="Arrow" Grid.Row="2" Kind="ChevronDown" FrameworkElement.Width="9"
                          FrameworkElement.Height="9" FrameworkElement.HorizontalAlignment="Center"
                          Control.Foreground="{TemplateBinding Control.Foreground}"/>
                <Popup x:Name="PART_Popup" VerticalOffset="1" Placement="Bottom" StaysOpen="false"
               AllowsTransparency="true" PopupAnimation="Fade"
               PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
               IsOpen="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}">
                    <Border Margin="0,0,5,5" Background="{DynamicResource WhiteBrush}"
                  BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="1"
                  Effect="{DynamicResource DropShadowBrush}">
                        <FrameworkElement.Resources>
                            <Style TargetType="{x:Type helpers:RibbonButton}" BasedOn="{StaticResource RibbonButtonBase}">
                                <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            </Style>
                        </FrameworkElement.Resources>
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <ContentControl Template="{TemplateBinding helpers:RibbonDropButton.DropTemplate}"/>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource AccentColorBrush3}" Property="Control.Background"/>
                <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                <Setter TargetName="Icon" Value="{DynamicResource HighlightBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
                <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                <Setter TargetName="Icon" Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Background" Value="Transparent"/>
                <Setter Property="Control.BorderBrush" Value="Transparent"/>
                <Setter Value="{DynamicResource GrayBrush3}" Property="Control.Foreground"/>
                <Setter TargetName="Icon" Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RibbonDropButtonBase" TargetType="{x:Type helpers:RibbonDropButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Padding" Value="5"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush1}"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.FontSize" Value="12"/>
        <Setter Property="Control.FontWeight" Value="Normal"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type helpers:RibbonDropButton}">
                    <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                  BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <icons:PackIconMaterial x:Name="Icon" Kind="{TemplateBinding helpers:RibbonDropButton.IconKind}" FrameworkElement.Width="16"
                                FrameworkElement.Height="16" FrameworkElement.VerticalAlignment="Center"
                                Control.Foreground="{DynamicResource AccentColorBrush}"/>
                            <TextBlock Grid.Column="1" Text="{TemplateBinding ContentControl.Content}" Margin="5,0"
                         VerticalAlignment="Center" TextWrapping="NoWrap" Foreground="{TemplateBinding Control.Foreground}"/>
                            <icons:PackIconMaterial x:Name="Arrow" Grid.Column="2" Kind="ChevronRight" FrameworkElement.Width="9"
                                FrameworkElement.Height="9" FrameworkElement.VerticalAlignment="Center"
                                Control.Foreground="{TemplateBinding Control.Foreground}"
                                FrameworkElement.FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                            <Popup x:Name="PART_Popup" HorizontalOffset="1" Placement="Right" StaysOpen="false"
                     AllowsTransparency="true" PopupAnimation="Fade"
                     PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                     IsOpen="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border Margin="0,0,5,5" Background="{DynamicResource WhiteBrush}"
                        BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="1"
                        Effect="{DynamicResource DropShadowBrush}">
                                    <FrameworkElement.Resources>
                                        <Style TargetType="{x:Type helpers:RibbonButton}" BasedOn="{StaticResource RibbonButtonBase}">
                                            <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                                        </Style>
                                    </FrameworkElement.Resources>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                                        <ContentControl Template="{TemplateBinding helpers:RibbonDropButton.DropTemplate}"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource AccentColorBrush3}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                            <Setter TargetName="Icon" Value="{DynamicResource HighlightBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Icon" Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Background" Value="Transparent"/>
                            <Setter Property="Control.BorderBrush" Value="Transparent"/>
                            <Setter Value="{DynamicResource GrayBrush3}" Property="Control.Foreground"/>
                            <Setter TargetName="Icon" Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="helpers:RibbonDropButton.IsEnlarged" Value="true">
                <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
                <Setter Property="FrameworkElement.MinWidth" Value="50"/>
                <Setter Property="FrameworkElement.MaxWidth" Value="80"/>
                <Setter Property="Grid.RowSpan" Value="2"/>
                <Setter Property="Control.Template" Value="{StaticResource LargeRibbonDropButton}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>