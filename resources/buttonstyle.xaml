<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                   
                    xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                    xmlns:helpers="clr-namespace:MetroRibbon.helpers">
  <Style x:Key="ButtonBase" TargetType="{x:Type Button}"
         BasedOn="{StaticResource AccentedSquareButtonStyle}">
    <Setter Property="metro:ControlsHelper.ContentCharacterCasing" Value="Normal"/>
    <Setter Property="Control.Padding" Value="12,4"/>
    <Setter Property="FrameworkElement.MinWidth" Value="80"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Style.Triggers>
      <Trigger Property="Button.IsDefault" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource HighlightBrush}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Button.IsDefault" Value="true"/>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush5}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MessageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBase}"/>
  <Style x:Key="InlineButton" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource HighlightBrush}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource HighlightBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.Padding" Value="10,1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="border" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <TextBlock x:Name="content" Padding="{TemplateBinding Control.Padding}"
                       Text="{TemplateBinding ContentControl.Content}" Background="{TemplateBinding Control.Background}"
                       Foreground="{TemplateBinding Control.Foreground}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
              <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource BlackBrush}" Property="Control.Foreground"/>
              <Setter Value="{DynamicResource AccentColorBrush2}" Property="Control.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource GrayBrush5}" Property="Control.BorderBrush"/>
              <Setter Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  
  </Style>
  <Style x:Key="LinkButton" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource AccentColorBrush}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.FontWeight" Value="SemiBold"/>
   
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <TextBlock x:Name="content" Padding="0" Margin="0" Text="{TemplateBinding ContentControl.Content}"
                     Background="{TemplateBinding Control.Background}" Foreground="{TemplateBinding Control.Foreground}"/>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="content" Property="TextBlock.TextDecorations" Value="Underline"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource BlackBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Converter={helpers:HasAncestorOfType AncestorType=ListBoxItem}}"
                           Value="True"/>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"
                           Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Converter={helpers:HasAncestorOfType AncestorType=TreeViewItem}}"
                           Value="True"/>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"
                           Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  </Style>
  <Style x:Key="LargeLinkButton" TargetType="{x:Type Button}" BasedOn="{StaticResource LinkButton}">
    <Setter Property="Control.FontSize" Value="13.8"/>
   
  </Style>
</ResourceDictionary>