<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:my="clr-namespace:MetroRibbon.helpers">
  <Style x:Key="PopupToggleBase" TargetType="{x:Type my:PopupToggle}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Padding" Value="2"/>
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type my:PopupToggle}">
          <Grid>
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}">
              <icons:PackIconMaterial x:Name="Icon" Kind="{TemplateBinding my:PopupToggle.IconKind}"
                                Control.Foreground="{TemplateBinding Control.Foreground}"
                                FrameworkElement.Width="{Binding IconSize, RelativeSource={RelativeSource TemplatedParent}}"
                                FrameworkElement.Height="{Binding IconSize, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Border>
            <Polygon x:Name="Arrow" Points="0,0 0,7 7,7" Fill="{TemplateBinding Control.BorderBrush}"
                     HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
            <Popup x:Name="PART_Popup" StaysOpen="false" AllowsTransparency="true" PopupAnimation="Slide"
                   PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                   IsOpen="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="popupBorder" Margin="0,0,5,5" Background="{DynamicResource WhiteBrush}"
                      BorderBrush="{DynamicResource ContextMenuBorderBrush}" BorderThickness="1"
                      Width="{TemplateBinding my:PopupToggle.PopupWidth}" Effect="{DynamicResource DropShadowBrush}">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                  <ContentControl Template="{TemplateBinding my:PopupToggle.PopupTemplate}"/>
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="my:PopupToggle.PopupWidth" Value="0">
              <Setter TargetName="popupBorder" Property="FrameworkElement.Width" Value="Auto"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
              <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
              <Setter TargetName="Border" Value="{DynamicResource ContextMenuBorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="Icon" Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Foreground"/>
              <Setter Value="{DynamicResource TextBoxMouseOverBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource GrayBrush5}" Property="Control.Foreground"/>
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="Control.Background" Value="Transparent">
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="Control.BorderThickness" Value="0">
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding IsOpen, ElementName=PART_Popup}">
              <Setter Property="UIElement.IsHitTestVisible" Value="false"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>