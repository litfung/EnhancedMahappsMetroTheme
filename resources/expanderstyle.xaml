<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro">
  <Style x:Key="ArrowExpanderDownHeader" BasedOn="{StaticResource ExpanderDownHeaderStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border" Margin="-4,0" BorderBrush="{DynamicResource GrayBrush7}" BorderThickness="0,0,0,1"
                  Padding="0,0,0,1">
            <Grid Background="Transparent" SnapsToDevicePixels="true">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <icons:PackIconMaterial x:Name="Arrow" FrameworkElement.Width="14" Kind="ArrowRight"
                                FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                                Control.Foreground="{DynamicResource AccentColorBrush}"/>
              <metro:ContentControlEx Grid.Column="1" FrameworkElement.Margin="7,0,0,0"
                                      Control.Padding="{TemplateBinding Control.Padding}"
                                      Control.HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                      Control.VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      ContentControl.Content="{TemplateBinding ContentControl.Content}"
                                      ContentControl.ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                      ContentControl.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      ContentControl.ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                      RecognizesAccessKey="true"
                                      UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                      ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:ControlsHelper.ContentCharacterCasing)}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="Kind" Value="ArrowDown"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="0,0,0,2"/>
              <Setter TargetName="Border" Property="Border.Padding" Value="0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PlusExpanderDownHeader" BasedOn="{StaticResource ExpanderDownHeaderStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Margin="-4" Background="Transparent" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" Padding="3,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                    BorderThickness="1" BorderBrush="{DynamicResource AccentColorBrush}"
                    Background="{DynamicResource AccentColorBrush}">
              <icons:PackIconMaterial x:Name="Arrow" FrameworkElement.Width="10" Kind="Plus"
                                Control.Foreground="{DynamicResource IdealForegroundColorBrush}"/>
            </Border>
            <metro:ContentControlEx Grid.Column="1" FrameworkElement.Margin="7,0,0,0"
                                    Control.Padding="{TemplateBinding Control.Padding}"
                                    Control.HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    Control.VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    ContentControl.Content="{TemplateBinding ContentControl.Content}"
                                    ContentControl.ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                    ContentControl.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    ContentControl.ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                    RecognizesAccessKey="true"
                                    UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:ControlsHelper.ContentCharacterCasing)}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="Kind" Value="Minus"/>
              <Setter TargetName="Arrow" Value="{DynamicResource AccentColorBrush}" Property="Control.Foreground"/>
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Arrow" Value="{DynamicResource BlackBrush}" Property="Control.Foreground"/>
              <Setter TargetName="Border" Value="{DynamicResource HighlightBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Arrow" Value="{DynamicResource IdealForegroundColorBrush}"
                      Property="Control.Foreground"/>
              <Setter TargetName="Border" Value="{DynamicResource HighlightBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="Border" Value="{DynamicResource HighlightBrush}" Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderBase" TargetType="{x:Type Expander}" BasedOn="{StaticResource MetroExpander}">
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="metro:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
    <Setter Property="metro:ControlsHelper.HeaderFontSize" Value="{DynamicResource ContentFontSize}"/>
    <Setter Property="metro:ExpanderHelper.HeaderDownStyle" Value="{StaticResource ArrowExpanderDownHeader}"/>
    <Setter Property="metro:GroupBoxHelper.HeaderForeground" Value="{x:Null}"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
</ResourceDictionary>